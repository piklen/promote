services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: prompt-optimizer-backend-prod
    restart: always
    # 移除 env_file 依赖，实现零配置部署
    environment:
      - DATABASE_URL=sqlite:///./data/prompt_optimizer.db
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - LOG_DIR=/app/logs
      # 零配置模式 - 最小环境变量设置
      - DEPLOYMENT_MODE=zero-config
    volumes:
      - backend_data:/app/data
      - backend_logs:/app/logs
    # 移除端口暴露，只在容器网络内访问
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s  # 给足够时间启动
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: prompt-optimizer-frontend-prod
    restart: always
    environment:
      # 零配置模式 - 使用nginx代理，前端无需直接访问后端
      - VITE_API_BASE_URL=/api/v1
      - NGINX_CLIENT_MAX_BODY_SIZE=10m
    ports:
      - "80:80"
      - "443:443"
      # 暴露8080端口供外部直接访问API（可选）
      - "8080:8080"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app_network
    volumes:
      # SSL证书挂载点（可选）
      - ./ssl:/etc/ssl/certs/app:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

networks:
  app_network:
    driver: bridge
    name: prompt-optimizer-network-prod

volumes:
  backend_data:
    driver: local
    name: prompt-optimizer-data-prod
  backend_logs:
    driver: local
    name: prompt-optimizer-logs-prod 