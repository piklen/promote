services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: prompt-optimizer-backend-prod
    restart: always
    env_file: .env.prod
    environment:
      - DATABASE_URL=sqlite:///./data/prompt_optimizer.db
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - LOG_DIR=/app/logs
      # 安全配置
      - ENCRYPTION_MASTER_KEY=${ENCRYPTION_MASTER_KEY}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-https://yourdomain.com}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-yourdomain.com}
      # 监控配置
      - ENABLE_METRICS=${ENABLE_METRICS:-false}
      - ENABLE_DEBUG=${ENABLE_DEBUG:-false}
    volumes:
      - backend_data:/app/data
      - backend_logs:/app/logs
    ports:
      - "127.0.0.1:8080:8080"  # 只绑定本地接口，由nginx代理
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: prompt-optimizer-frontend-prod
    restart: always
    env_file: .env.prod
    environment:
      - VITE_API_BASE_URL=${API_BASE_URL:-https://yourdomain.com/api/v1}
      - NGINX_CLIENT_MAX_BODY_SIZE=${CLIENT_MAX_BODY_SIZE:-10m}
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app_network
    volumes:
      # SSL证书挂载点（可选）
      - ${SSL_CERT_PATH:-./ssl}:/etc/ssl/certs/app:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # 可选：监控服务（生产环境推荐）
  watchtower:
    image: containrrr/watchtower:latest
    container_name: prompt-optimizer-watchtower
    restart: always
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=300
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_REVIVE_STOPPED=false
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: prompt-optimizer-backend-prod prompt-optimizer-frontend-prod
    profiles:
      - monitoring

networks:
  app_network:
    driver: bridge
    name: prompt-optimizer-network-prod

volumes:
  backend_data:
    driver: local
    name: prompt-optimizer-data-prod
  backend_logs:
    driver: local
    name: prompt-optimizer-logs-prod 